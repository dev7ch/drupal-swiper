<?php

namespace Drupal\swiper\Form;

use Drupal\Core\Entity\EntityForm;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\swiper\SwiperDefaults;

/**
 * Class SwiperForm.
 *
 * @package Drupal\swiper\Form
 */
class SwiperForm extends EntityForm {

  /**
   * {@inheritdoc}
   */
  public function form(array $form, FormStateInterface $form_state) {
    $form = parent::form($form, $form_state);

    $swiper = $this->entity;
    $options = $swiper->getOptions();
    $default_options = SwiperDefaults::defaultOptions();

    $form['label'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Label'),
      '#maxlength' => 255,
      '#default_value' => $swiper->label(),
      '#description' => $this->t('A human-readable title for this option set.'),
      '#required' => TRUE,
    ];

    $form['id'] = [
      '#type' => 'machine_name',
      '#default_value' => $swiper->id(),
      '#machine_name' => [
        'exists' => '\Drupal\swiper\Entity\Swiper::load',
      ],
      '#disabled' => !$swiper->isNew(),
    ];

    // Options Vertical Tab Group table.
    // @TODO Add more options.
    $form['tabs'] = [
      '#type' => 'vertical_tabs',
    ];

    // General Slideshow and Animiation Settings.
    $form['general_params'] = [
      '#type' => 'details',
      '#title' => $this->t('General Swiper params'),
      '#group' => 'tabs',
      '#open' => TRUE,
    ];

    $form['general_params']['direction'] = [
      '#type' => 'select',
      '#title' => $this->t('Direction'),
      '#description' => $this->t("Select deriction. Could be 'horizontal' or 'vertical' (for vertical slider)."),
      '#options' => [
        'horizontal'   => $this->t('Horizontal'),
        'vertical'  => $this->t('Vertical'),
      ],
      '#default_value' => $options['direction'] ?? $default_options['direction'],
    ];

    $form['general_params']['speed'] = [
      '#type' => 'number',
      '#title' => $this->t('Speed'),
      '#description' => $this->t('Duration of transition between slides (in ms).'),
      // Only positive numbers.
      '#min' => 0,
      // Only integers.
      '#step' => 1,
      '#default_value' => $options['speed'] ?? $default_options['speed'],
    ];

    // Advanced Options.
    $form['advanced'] = [
      '#type' => 'details',
      '#title' => $this->t('Advanced Options'),
      '#group' => 'tabs',
    ];
    $form['advanced']['namespace'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Namespace'),
      '#description' => $this->t('Prefix string attached to the classes of all elements generated by the plugin.'),
      '#size' => 40,
      '#maxlength' => 255,
      '#element_validate' => ['::validateNamespace'],
      '#default_value' => isset($options['namespace']) ? $options['namespace'] : $default_options['namespace'],
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function save(array $form, FormStateInterface $form_state) {
    /** @var \Drupal\swiper\Entity\Swiper $swiper */
    $swiper = $this->entity;

    $status = parent::save($form, $form_state);

    switch ($status) {
      case SAVED_NEW:
        drupal_set_message($this->t('Created the %label Swiper options.', [
          '%label' => $swiper->label(),
        ]));
        break;

      default:
        drupal_set_message($this->t('Saved the %label Swiper options.', [
          '%label' => $swiper->label(),
        ]));
    }
    $form_state->setRedirectUrl($swiper->toUrl('collection'));
  }

  /**
   * {@inheritdoc}
   */
  protected function copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    $options = [];
    $values = $form_state->getValues();
    foreach ($values as $key => $value) {
      if (in_array($key, ['id', 'label'])) {
        $entity->set($key, $value);
      }
      else {
        $options[$key] = $value;
      }
    }
    $entity->set('options', $options);
  }

  /**
   * {@inheritdoc}
   */
  protected function actions(array $form, FormStateInterface $form_state) {
    $actions = parent::actions($form, $form_state);
    // Prevent access to delete button when editing default configuration.
    if ($this->entity->id() == 'default' && isset($actions['delete'])) {
      $actions['delete']['#access'] = FALSE;
    }
    return $actions;
  }

  /**
   * Validation functions.
   */
  public function validateNamespace(array &$element, FormStateInterface $form_state) {
    // @todo
    // @see form_error()
    return TRUE;
  }

  /**
   * Validation functions.
   */
  public function validateSelector(array &$element, FormStateInterface $form_state) {
    // @todo
    // @see form_error()
    return TRUE;
  }

  /**
   * Validate the correct version for thumbnail options.
   */
  public function validateMinimumVersion22(array &$element, FormStateInterface $form_state) {
    $lib = libraries_detect('swiper');
    if (!isset($lib['version'])) {
      drupal_set_message($this->t('Unable to detect Swiper library version. Some options may not function properly. Please review the README.md file for installation instructions.'), 'warning');
    }
    else {
      $version = $lib['version'];
      $required = "2.2";
      if ($element['#value'] && !version_compare($version, $required, '>=')) {
        $form_state->setError($element, $this->t('To use %name you must install Swiper version !required or higher.', [
          '%name' => $element['#title'],
          '!required' => Link::fromTextAndUrl($required, Url::fromUri('https://github.com/woothemes/Swiper/tree/version/2.2')),
        ]));
      }
    }
  }

  /**
   * Validate thumbnail option values.
   *
   * Empties the value of the thumbnail caption option when the paging control
   * is not set to thumbnails.
   *
   * @param array $element
   *   The element to validate.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The form state.
   */
  public function validateThumbnailOptions(array &$element, FormStateInterface $form_state) {
    if ($form_state->getValue('controlNav') !== 'thumbnails' && $element['#value']) {
      $form_state->setValueForElement($element, '');
    }
  }

}
